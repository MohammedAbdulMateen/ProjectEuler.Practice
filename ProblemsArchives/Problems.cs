using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;

namespace ProblemsArchives
{
    [TestClass]
    public class Problems
    {
        /// <summary>
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        /// Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        [TestMethod]
        public void Multiples_of_3_and_5()
        {
            // Arrange
            var sum = 0;

            // Act
            for (int i = 1; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                {
                    sum += i;
                }
            }

            // Assert
            Assert.AreEqual(233168, sum);
        }

        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        /// </summary>
        [TestMethod]
        public void Even_Fibonacci_numbers()
        {
            // Arrange
            var sum = 0;
            var current = 0;
            var next = 1;

            // Act
            while (next < 4000000)
            {
                var temp = next;
                next = current + next;
                current = temp;
                if (next % 2 == 0)
                {
                    sum += next;
                }
            }

            // Assert
            Assert.AreEqual(4613732, sum);
        }

        /// <summary>
        /// The prime factors of 13195 are 5, 7, 13 and 29.
        /// What is the largest prime factor of the number 600851475143 ?
        /// </summary>
        [TestMethod]
        public void Largest_Prime_Factor()
        {
            // Arrange
            var factor = default(long);
            var number = 600851475143;
            var factorsBoundary = Math.Round(Math.Sqrt(number) / 2);

            // Act
            for (long i = 2; i < factorsBoundary; i++)
            {
                if (number % i == 0)
                {
                    // i is a factor
                    var isPrimeFactor = true;
                    var boundary = i - 1;
                    for (long j = 2; j < boundary; j++)
                    {
                        if (i % j == 0)
                        {
                            // i is not a prime
                            isPrimeFactor = false;
                            break;
                        }
                    }

                    if (isPrimeFactor)
                    {
                        factor = i;
                    }
                }
            }

            // Assert
            Assert.AreEqual(6857, factor);
        }
    }
}
